<?php

/**
 * Implements hook_message_presave().
 *
 * We cannot use a token to show the order-summary, since both Token and
 * Entity API modules invoke token_generate() which results with an array
 * instead of a string with the replacement text.
 *
 * Instead, upon saving the message for the first time we inject an
 * argument with a callback, that will return the order summary.
 *
 * @link http://drupal.org/node/1272560
 */
//function commerce_message_message_presave(Message $message) {
//  // Only support unsaved messages that re-use our order reference field.
//  $wrapper = entity_metadata_wrapper('message', $message);
//  if (!empty($message->mid) || !isset($wrapper->message_commerce_order)) {
//    return;
//  }
//
//  $message->arguments['!order-summary'] = array(
//    'callback' => 'commerce_message_order_summary',
//    'pass message' => TRUE,
//  );
//}

/**
 * Message callback; Show order summary.
 *
 * @param Message $message
 *   The Message entity.
 *
 * @return string
 *   The output of the View.
 */
function commerce_message_order_summary(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);
  $view = views_get_view('commerce_cart_summary');
  $view->set_arguments(array($wrapper->message_commerce_order->getIdentifier()));
  $view->hide_admin_links = TRUE;

  // Disable SQL query rewrite so this renders properly for token.
  // @link https://www.drupal.org/node/1895418
  $view->display['default']->display_options['query']['options']['disable_sql_rewrite'] = TRUE;

  return $view->preview();
}

/**
 * Displays the complete history for the given order.
 */
function commerce_message_history($order) {
  $arguments = array($order->order_id);
  $view = views_get_view('commerce_message_messages');
  $view->set_display('block_1');
  $view->set_arguments($arguments);
  $view->override_url = $_GET['q'];

  return $view->preview();
}
